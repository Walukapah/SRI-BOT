const config = require('../config')
const {cmd, commands} = require('../command')

cmd({
    pattern: "msginfo",
    desc: "Extract detailed message information including newsletter detection",
    category: "main",
    filename: __filename
},
async(conn, mek, m, {from, quoted, reply}) => {
    try {
        const targetMsg = quoted || m;
        
        if (!targetMsg.message) {
            return reply("‚ùó ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª message ‡∂ë‡∂ö‡∂ö‡∑ä reply ‡∂ö‡∂ª‡∂±‡∑ä‡∂±");
        }

        // Enhanced newsletter detection
        const detectNewsletter = (msg) => {
            // Method 1: Check standard newsletter info
            if (msg.message?.contextInfo?.forwardedNewsletterMessageInfo) {
                const info = msg.message.contextInfo.forwardedNewsletterMessageInfo;
                return {
                    type: 'direct',
                    newsletterJid: info.newsletterJID,
                    newsletterName: info.newsletterName,
                    serverId: info.serverID,
                    viewCount: msg.message?.contextInfo?.forwardingScore || 0
                };
            }
            
            // Method 2: Check for channel forwarded messages
            if (msg.message?.extendedTextMessage?.contextInfo?.isForwarded) {
                const text = msg.message.extendedTextMessage.text || '';
                
                // Channel pattern detection
                const channelPattern1 = text.match(/Forwarded from (.+?)\n/);
                const channelPattern2 = text.match(/@(\d+)\n/);
                
                if (channelPattern1 || channelPattern2) {
                    return {
                        type: 'channel_forward',
                        newsletterJid: channelPattern2 ? `${channelPattern2[1]}@newsletter` : 'unknown@newsletter',
                        newsletterName: channelPattern1 ? channelPattern1[1] : 'Unknown Channel',
                        viewCount: msg.message?.contextInfo?.forwardingScore || 0
                    };
                }
            }
            
            // Method 3: Check for newsletter mentions in text
            const newsletterMention = msg.message?.extendedTextMessage?.text?.match(/(\d+)@newsletter/);
            if (newsletterMention) {
                return {
                    type: 'mentioned',
                    newsletterJid: newsletterMention[0],
                    newsletterName: 'Mentioned Newsletter',
                    viewCount: msg.message?.contextInfo?.forwardingScore || 0
                };
            }
            
            return null;
        };

        const newsletterInfo = detectNewsletter(targetMsg);
        const msgType = Object.keys(targetMsg.message)[0];
        const viewCount = targetMsg.message?.contextInfo?.forwardingScore || 0;
        
        let response = `üìå *Message Analysis*\n\n`;
        response += `üîπ *Message Type:* ${msgType}\n`;
        response += `üëÅÔ∏è *View Count:* ${viewCount}\n\n`;
        
        if (newsletterInfo) {
            response += `‚úÖ *Newsletter/Channel Detected!*\n`;
            response += `üìõ *Name:* ${newsletterInfo.newsletterName}\n`;
            response += `üî¢ *JID:* ${newsletterInfo.newsletterJid}\n`;
            response += `üì§ *Source:* ${newsletterInfo.type === 'direct' ? 'Direct Newsletter' : 
                          newsletterInfo.type === 'channel_forward' ? 'Forwarded from Channel' : 'Mentioned'}\n\n`;
            
            if (newsletterInfo.type === 'channel_forward') {
                response += `‚ÑπÔ∏è ‡∂∏‡∑ô‡∂∫ ‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∂ö‡∑í‡∂±‡∑ä ‡∂ë‡∑Ä‡∂± ‡∂Ω‡∂Ø ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑í (‡∂±‡∑í‡∑Ä‡∑ä‡∑É‡∑ä‡∂Ω‡∑ô‡∂ß‡∂ª‡∑ä ‡∂Ω‡∑ô‡∑É ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠‡∑ä‡∂≠)\n`;
                response += `‚ö†Ô∏è ‡∑É‡∑ê‡∂Ω‡∂ö‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫‡∑í: ‡∂†‡∑ê‡∂±‡∂Ω ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂© ‡∑É‡∂∏‡∑Ñ‡∂ª ‡∑Ä‡∑í‡∂ß ‡∂±‡∑í‡∑Ä‡∑ä‡∑É‡∑ä‡∂Ω‡∑ô‡∂ß‡∂ª‡∑ä ‡∂Ω‡∑ô‡∑É ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫\n`;
            } else {
                response += `‚ÑπÔ∏è ‡∂∏‡∑ô‡∂∫ ‡∂±‡∑í‡∑Ä‡∑ä‡∑É‡∑ä‡∂Ω‡∑ô‡∂ß‡∂ª‡∑ä ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä ‡∂ë‡∑Ä‡∂± ‡∂Ω‡∂Ø ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫‡∂ö‡∑í\n`;
            }
        } else {
            response += `‚ùå *Not a Newsletter/Channel Message*\n\n`;
            response += `‚ÑπÔ∏è ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂±‡∑í‡∑Ä‡∑ä‡∑É‡∑ä‡∂Ω‡∑ô‡∂ß‡∂ª‡∑ä ‡∑Ñ‡∑ù ‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∂ö‡∑í‡∂±‡∑ä ‡∂ë‡∑Ä‡∂± ‡∂Ω‡∂Ø‡∑ä‡∂Ø‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö\n`;
        }

        // Add raw message info for debugging
        response += `\nüîç *Debug Info:*\n`;
        response += `Message Keys: ${Object.keys(targetMsg.message).join(', ')}\n`;
        if (targetMsg.message?.contextInfo) {
            response += `Context Info: Present\n`;
        } else {
            response += `Context Info: Not Present\n`;
        }

        await conn.sendMessage(from, { 
            text: response,
            contextInfo: { forwardingScore: 1 }
        }, { quoted: mek });

    } catch(e) {
        console.error('Error:', e);
        reply(`‚ùå ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e.message}`);
    }
});
